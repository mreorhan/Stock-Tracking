//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestDevx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class STOK_TAKIPEntities : DbContext
    {
        public STOK_TAKIPEntities()
            : base("name=STOK_TAKIPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<loanDetail> loanDetails { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<purchase> purchases { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<userType> userTypes { get; set; }
    
        public virtual int createNewProduct(string productName, string productFeatures, string purchasedDate, Nullable<int> purchasedByID, Nullable<int> purchasedPrice, Nullable<int> pieces)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productFeaturesParameter = productFeatures != null ?
                new ObjectParameter("productFeatures", productFeatures) :
                new ObjectParameter("productFeatures", typeof(string));
    
            var purchasedDateParameter = purchasedDate != null ?
                new ObjectParameter("purchasedDate", purchasedDate) :
                new ObjectParameter("purchasedDate", typeof(string));
    
            var purchasedByIDParameter = purchasedByID.HasValue ?
                new ObjectParameter("purchasedByID", purchasedByID) :
                new ObjectParameter("purchasedByID", typeof(int));
    
            var purchasedPriceParameter = purchasedPrice.HasValue ?
                new ObjectParameter("purchasedPrice", purchasedPrice) :
                new ObjectParameter("purchasedPrice", typeof(int));
    
            var piecesParameter = pieces.HasValue ?
                new ObjectParameter("pieces", pieces) :
                new ObjectParameter("pieces", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createNewProduct", productNameParameter, productFeaturesParameter, purchasedDateParameter, purchasedByIDParameter, purchasedPriceParameter, piecesParameter);
        }
    }
}
